{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"skateboard","text":"<p>Warning! This is alpha software still under rapid development.</p> <p> </p>"},{"location":"#your-application-on-wheels","title":"Your application, on wheels","text":"<pre><code>(local trucks (require :trucks))\n(do\n(trucks.mkconfig!)\n(trucks.system! {:panic \"unwind\"\n:verbose \"true\"})\n;; (trucks.defaults! {:run-ctx \"npm\"\n;;  :cmd \"run devstart\"\n;;  :sync \"npm install\"})\n(trucks.service! :docs {:github \"phasewalk1/phasewalk1.github.io\"\n:run-ctx \"hugo\"\n:cmd \"serve -D\"\n:sync \"git submodule update --init --recursive\"})\n(trucks.service! :courier {:github \"phasewalk1/courier\"\n:run-ctx \"cargo\"\n:cmd \"watch -x run\"})\n(local contract (trucks.contract!))\ncontract)\n</code></pre>"},{"location":"#skateboard-is-not-virtualization-software","title":"skateboard is not virtualization software","text":"<p>For smaller teams who are deploying applications with only a handful of services, skateboard gives them wheels to share their system without relying on virtualization. This brings a few core advantages over what I would call container overkill.</p> <ul> <li>skateboard can sync and launch individual services much faster than containerized composers.</li> <li>skateboard has a much smaller footprint; no containers means no impactful storage footprint.</li> <li>no background daemon and no os-level virtualization means less RAM usage.</li> <li>trucks allows developers to be more expressive when defining their system than yaml.</li> </ul> <p>Of course -- because skateboard is not virtualization software -- this means     </p> <ul> <li>It doesn't provide the isolation between processes and system resources like CPU, memory, and I/O offered by full-fledged containerization solutions.</li> <li>It doesn't provide the same level of system security as software like Docker, which leverages namespaces and cgroups to isolate resources.</li> <li>It's not designed for deployment across multiple machines; instead, it excels in managing multi-service applications on a single host.</li> <li>It doesn't have an inbuilt dependency management system. Instead, it assumes that your services are managed by an appropriate language-specific package manager, such as npm,  Cargo, pip, etc. Skateboard expects these tools to handle the heavy lifting of dependency management. In a trucks contract, the <code>sync</code> field specifies the command skateboard will run to ensure all dependencies are met, like npm install or cargo build, before it tries to run your services</li> </ul> <p>In other words, skateboard is designed for simplicity and speed in situations where the overhead and complexity of virtualization are unnecessary. By focusing on sharing and running multi-service applications on a single host, it streamlines the development and deployment process for small teams building simpler applications.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>trucks<ul> <li>Give your application wheels by writing a trucks contract that defines your system and its components. Contracts are written in Lisp syntax using skateboard's trucks library in Fennel</li> <li>skateboard embeds necessary Trucks / Fennel dependencies so you can get started right away</li> <li><code>skateboard install</code></li> </ul> </li> <li>Sync service repositories</li> <li>Run the system and all it\u2019s services with goroutines in a single shell with unified logs</li> <li>A user in possession of a valid trucks contract can spin up the application in a single command<ul> <li><code>skateboard up</code></li> </ul> </li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>\u26a0\ufe0f skateboard assumes you have a Lua runtime installed. If you don't already or you fear your runtime may be out of date, see https://lua.org/download.html.</p>"},{"location":"#install-the-skateboard-binary-with-go","title":"Install the skateboard binary with go","text":"<pre><code> go install github.com/phasewalk1/skateboard@latest\n</code></pre> <p>Try to run <code>skateboard -h</code> to ensure that <code>$GOPATH/bin</code> is in path, usually at <code>~/go/bin/</code> or <code>/usr/local/go/bin</code>.</p>"},{"location":"#install-trucks","title":"Install trucks","text":"<p>This will create a home for skateboard at <code>$HOME/.skateboard</code>, and will sync and build any dependencies needed to work with trucks.  <pre><code> skateboard install\n</code></pre></p>"},{"location":"#usage-examples","title":"Usage / Examples","text":""},{"location":"#create-a-new-contract","title":"Create a new contract","text":"<p>You can scaffold a new contract by running <pre><code>skateboard new my-contract\n</code></pre> This will create a directory at <code>my-contract/</code> and initialize it as a git repository; it also scaffolds an example contract for you at <code>trucks.contract.fnl</code> that looks exactly like the example contract above.</p>"},{"location":"#share-your-wheels","title":"Share your wheels","text":"<p>Once you've defined your application in a trucks contract, you can share the contract with anyone who has skateboard installed. Once they have your contract, they can run your application on wheels by navigating to the directory the contract is in and running <pre><code>skateboard up -n\n</code></pre></p> <p>The <code>-n</code> flag only needs to be passed the first time you run <code>up</code> on a contract. This tells skateboard to clone new copies of the services before attempting to run them; But it can also be used if you have existing copies and want to start with a clean slate, pass <code>--force -n</code> to force clone new copies.</p>"},{"location":"cobra/skateboard/","title":"Skateboard","text":""},{"location":"cobra/skateboard/#skateboard","title":"skateboard","text":"<p>All your services, on trucks and wheels</p>"},{"location":"cobra/skateboard/#options","title":"Options","text":"<pre><code>      --down   Take down the whole thing\n  -h, --help   help for skateboard\n</code></pre>"},{"location":"cobra/skateboard/#see-also","title":"SEE ALSO","text":"<ul> <li>skateboard check    - Checks a contract for validity</li> <li>skateboard completion  - Generate the autocompletion script for the specified shell</li> <li>skateboard install    - install skateboard</li> <li>skateboard mkdocs  - Generate documentation</li> <li>skateboard new    - Scaffold a new contract repository</li> <li>skateboard service    - Run services manually</li> <li>skateboard sync  - Sync the services based on the contract</li> <li>skateboard up  - Spinup the application and all its services</li> </ul>"},{"location":"cobra/skateboard/#auto-generated-by-spf13cobra-on-4-aug-2023","title":"Auto generated by spf13/cobra on 4-Aug-2023","text":""},{"location":"cobra/skateboard_check/","title":"check","text":""},{"location":"cobra/skateboard_check/#skateboard-check","title":"skateboard check","text":"<p>Checks a contract for validity</p> <pre><code>skateboard check [flags]\n</code></pre>"},{"location":"cobra/skateboard_check/#options","title":"Options","text":"<pre><code>  -h, --help          help for check\n  -H, --home string   path to skateboard home directory (default \"/home/kat/.skateboard\")\n</code></pre>"},{"location":"cobra/skateboard_check/#see-also","title":"SEE ALSO","text":"<ul> <li>skateboard    - All your services, on trucks and wheels</li> </ul>"},{"location":"cobra/skateboard_check/#auto-generated-by-spf13cobra-on-4-aug-2023","title":"Auto generated by spf13/cobra on 4-Aug-2023","text":""},{"location":"cobra/skateboard_completion/","title":"completion","text":""},{"location":"cobra/skateboard_completion/#skateboard-completion","title":"skateboard completion","text":"<p>Generate the autocompletion script for the specified shell</p>"},{"location":"cobra/skateboard_completion/#synopsis","title":"Synopsis","text":"<p>Generate the autocompletion script for skateboard for the specified shell. See each sub-command's help for details on how to use the generated script.</p>"},{"location":"cobra/skateboard_completion/#options","title":"Options","text":"<pre><code>  -h, --help   help for completion\n</code></pre>"},{"location":"cobra/skateboard_completion/#see-also","title":"SEE ALSO","text":"<ul> <li>skateboard    - All your services, on trucks and wheels</li> <li>skateboard completion bash    - Generate the autocompletion script for bash</li> <li>skateboard completion fish    - Generate the autocompletion script for fish</li> <li>skateboard completion powershell    - Generate the autocompletion script for powershell</li> <li>skateboard completion zsh  - Generate the autocompletion script for zsh</li> </ul>"},{"location":"cobra/skateboard_completion/#auto-generated-by-spf13cobra-on-4-aug-2023","title":"Auto generated by spf13/cobra on 4-Aug-2023","text":""},{"location":"cobra/skateboard_completion_bash/","title":"Skateboard completion bash","text":""},{"location":"cobra/skateboard_completion_bash/#skateboard-completion-bash","title":"skateboard completion bash","text":"<p>Generate the autocompletion script for bash</p>"},{"location":"cobra/skateboard_completion_bash/#synopsis","title":"Synopsis","text":"<p>Generate the autocompletion script for the bash shell.</p> <p>This script depends on the 'bash-completion' package. If it is not installed already, you can install it via your OS's package manager.</p> <p>To load completions in your current shell session:</p> <pre><code>source &lt;(skateboard completion bash)\n</code></pre> <p>To load completions for every new session, execute once:</p>"},{"location":"cobra/skateboard_completion_bash/#linux","title":"Linux:","text":"<pre><code>skateboard completion bash &gt; /etc/bash_completion.d/skateboard\n</code></pre>"},{"location":"cobra/skateboard_completion_bash/#macos","title":"macOS:","text":"<pre><code>skateboard completion bash &gt; $(brew --prefix)/etc/bash_completion.d/skateboard\n</code></pre> <p>You will need to start a new shell for this setup to take effect.</p> <pre><code>skateboard completion bash\n</code></pre>"},{"location":"cobra/skateboard_completion_bash/#options","title":"Options","text":"<pre><code>  -h, --help              help for bash\n      --no-descriptions   disable completion descriptions\n</code></pre>"},{"location":"cobra/skateboard_completion_bash/#see-also","title":"SEE ALSO","text":"<ul> <li>skateboard completion  - Generate the autocompletion script for the specified shell</li> </ul>"},{"location":"cobra/skateboard_completion_bash/#auto-generated-by-spf13cobra-on-4-aug-2023","title":"Auto generated by spf13/cobra on 4-Aug-2023","text":""},{"location":"cobra/skateboard_completion_fish/","title":"Skateboard completion fish","text":""},{"location":"cobra/skateboard_completion_fish/#skateboard-completion-fish","title":"skateboard completion fish","text":"<p>Generate the autocompletion script for fish</p>"},{"location":"cobra/skateboard_completion_fish/#synopsis","title":"Synopsis","text":"<p>Generate the autocompletion script for the fish shell.</p> <p>To load completions in your current shell session:</p> <pre><code>skateboard completion fish | source\n</code></pre> <p>To load completions for every new session, execute once:</p> <pre><code>skateboard completion fish &gt; ~/.config/fish/completions/skateboard.fish\n</code></pre> <p>You will need to start a new shell for this setup to take effect.</p> <pre><code>skateboard completion fish [flags]\n</code></pre>"},{"location":"cobra/skateboard_completion_fish/#options","title":"Options","text":"<pre><code>  -h, --help              help for fish\n      --no-descriptions   disable completion descriptions\n</code></pre>"},{"location":"cobra/skateboard_completion_fish/#see-also","title":"SEE ALSO","text":"<ul> <li>skateboard completion  - Generate the autocompletion script for the specified shell</li> </ul>"},{"location":"cobra/skateboard_completion_fish/#auto-generated-by-spf13cobra-on-4-aug-2023","title":"Auto generated by spf13/cobra on 4-Aug-2023","text":""},{"location":"cobra/skateboard_completion_powershell/","title":"Skateboard completion powershell","text":""},{"location":"cobra/skateboard_completion_powershell/#skateboard-completion-powershell","title":"skateboard completion powershell","text":"<p>Generate the autocompletion script for powershell</p>"},{"location":"cobra/skateboard_completion_powershell/#synopsis","title":"Synopsis","text":"<p>Generate the autocompletion script for powershell.</p> <p>To load completions in your current shell session:</p> <pre><code>skateboard completion powershell | Out-String | Invoke-Expression\n</code></pre> <p>To load completions for every new session, add the output of the above command to your powershell profile.</p> <pre><code>skateboard completion powershell [flags]\n</code></pre>"},{"location":"cobra/skateboard_completion_powershell/#options","title":"Options","text":"<pre><code>  -h, --help              help for powershell\n      --no-descriptions   disable completion descriptions\n</code></pre>"},{"location":"cobra/skateboard_completion_powershell/#see-also","title":"SEE ALSO","text":"<ul> <li>skateboard completion  - Generate the autocompletion script for the specified shell</li> </ul>"},{"location":"cobra/skateboard_completion_powershell/#auto-generated-by-spf13cobra-on-4-aug-2023","title":"Auto generated by spf13/cobra on 4-Aug-2023","text":""},{"location":"cobra/skateboard_completion_zsh/","title":"Skateboard completion zsh","text":""},{"location":"cobra/skateboard_completion_zsh/#skateboard-completion-zsh","title":"skateboard completion zsh","text":"<p>Generate the autocompletion script for zsh</p>"},{"location":"cobra/skateboard_completion_zsh/#synopsis","title":"Synopsis","text":"<p>Generate the autocompletion script for the zsh shell.</p> <p>If shell completion is not already enabled in your environment you will need to enable it.  You can execute the following once:</p> <pre><code>echo \"autoload -U compinit; compinit\" &gt;&gt; ~/.zshrc\n</code></pre> <p>To load completions in your current shell session:</p> <pre><code>source &lt;(skateboard completion zsh)\n</code></pre> <p>To load completions for every new session, execute once:</p>"},{"location":"cobra/skateboard_completion_zsh/#linux","title":"Linux:","text":"<pre><code>skateboard completion zsh &gt; \"${fpath[1]}/_skateboard\"\n</code></pre>"},{"location":"cobra/skateboard_completion_zsh/#macos","title":"macOS:","text":"<pre><code>skateboard completion zsh &gt; $(brew --prefix)/share/zsh/site-functions/_skateboard\n</code></pre> <p>You will need to start a new shell for this setup to take effect.</p> <pre><code>skateboard completion zsh [flags]\n</code></pre>"},{"location":"cobra/skateboard_completion_zsh/#options","title":"Options","text":"<pre><code>  -h, --help              help for zsh\n      --no-descriptions   disable completion descriptions\n</code></pre>"},{"location":"cobra/skateboard_completion_zsh/#see-also","title":"SEE ALSO","text":"<ul> <li>skateboard completion  - Generate the autocompletion script for the specified shell</li> </ul>"},{"location":"cobra/skateboard_completion_zsh/#auto-generated-by-spf13cobra-on-4-aug-2023","title":"Auto generated by spf13/cobra on 4-Aug-2023","text":""},{"location":"cobra/skateboard_install/","title":"install","text":""},{"location":"cobra/skateboard_install/#skateboard-install","title":"skateboard install","text":"<p>install skateboard</p> <pre><code>skateboard install [flags]\n</code></pre>"},{"location":"cobra/skateboard_install/#options","title":"Options","text":"<pre><code>  -f, --force     Force install skateboard even if it already exists\n  -h, --help      help for install\n  -x, --no-deps   Don't install dependencies\n  -t, --trucks    install trucks (default true)\n</code></pre>"},{"location":"cobra/skateboard_install/#see-also","title":"SEE ALSO","text":"<ul> <li>skateboard    - All your services, on trucks and wheels</li> </ul>"},{"location":"cobra/skateboard_install/#auto-generated-by-spf13cobra-on-4-aug-2023","title":"Auto generated by spf13/cobra on 4-Aug-2023","text":""},{"location":"cobra/skateboard_mkdocs/","title":"mkdocs","text":""},{"location":"cobra/skateboard_mkdocs/#skateboard-mkdocs","title":"skateboard mkdocs","text":"<p>Generate documentation</p> <pre><code>skateboard mkdocs [flags]\n</code></pre>"},{"location":"cobra/skateboard_mkdocs/#options","title":"Options","text":"<pre><code>  -h, --help   help for mkdocs\n</code></pre>"},{"location":"cobra/skateboard_mkdocs/#see-also","title":"SEE ALSO","text":"<ul> <li>skateboard    - All your services, on trucks and wheels</li> </ul>"},{"location":"cobra/skateboard_mkdocs/#auto-generated-by-spf13cobra-on-4-aug-2023","title":"Auto generated by spf13/cobra on 4-Aug-2023","text":""},{"location":"cobra/skateboard_new/","title":"new","text":""},{"location":"cobra/skateboard_new/#skateboard-new","title":"skateboard new","text":"<p>Scaffold a new contract repository</p>"},{"location":"cobra/skateboard_new/#synopsis","title":"Synopsis","text":"<p>Creates a working git repository at path and scaffolds an example skateboard contract</p> <pre><code>skateboard new &lt;path&gt; [flags]\n</code></pre>"},{"location":"cobra/skateboard_new/#options","title":"Options","text":"<pre><code>  -f, --force    Force create the new workspace\n  -h, --help     help for new\n  -t, --toml     Use TOML for config\n      --trucks   Use Trucks for config (default true)\n  -y, --yaml     Use YAML for config\n</code></pre>"},{"location":"cobra/skateboard_new/#see-also","title":"SEE ALSO","text":"<ul> <li>skateboard    - All your services, on trucks and wheels</li> </ul>"},{"location":"cobra/skateboard_new/#auto-generated-by-spf13cobra-on-4-aug-2023","title":"Auto generated by spf13/cobra on 4-Aug-2023","text":""},{"location":"cobra/skateboard_service/","title":"service","text":""},{"location":"cobra/skateboard_service/#skateboard-service","title":"skateboard service","text":"<p>Run services manually</p> <pre><code>skateboard service [flags]\n</code></pre>"},{"location":"cobra/skateboard_service/#options","title":"Options","text":"<pre><code>  -b, --build            Build the containers before running them\n  -h, --help             help for service\n  -p, --profile string   Use a container profile (default \"default\")\n</code></pre>"},{"location":"cobra/skateboard_service/#see-also","title":"SEE ALSO","text":"<ul> <li>skateboard    - All your services, on trucks and wheels</li> </ul>"},{"location":"cobra/skateboard_service/#auto-generated-by-spf13cobra-on-4-aug-2023","title":"Auto generated by spf13/cobra on 4-Aug-2023","text":""},{"location":"cobra/skateboard_sync/","title":"sync","text":""},{"location":"cobra/skateboard_sync/#skateboard-sync","title":"skateboard sync","text":"<p>Sync the services based on the contract</p>"},{"location":"cobra/skateboard_sync/#synopsis","title":"Synopsis","text":"<p>This command will sync services based on the 'skateboard.toml' contract. It loads the service map from the contract and performs operations based on it.</p> <pre><code>skateboard sync [flags]\n</code></pre>"},{"location":"cobra/skateboard_sync/#options","title":"Options","text":"<pre><code>  -f, --force   Force sync with new clones\n  -h, --help    help for sync\n</code></pre>"},{"location":"cobra/skateboard_sync/#see-also","title":"SEE ALSO","text":"<ul> <li>skateboard    - All your services, on trucks and wheels</li> </ul>"},{"location":"cobra/skateboard_sync/#auto-generated-by-spf13cobra-on-4-aug-2023","title":"Auto generated by spf13/cobra on 4-Aug-2023","text":""},{"location":"cobra/skateboard_up/","title":"up","text":""},{"location":"cobra/skateboard_up/#skateboard-up","title":"skateboard up","text":"<p>Spinup the application and all its services</p> <pre><code>skateboard up [flags]\n</code></pre>"},{"location":"cobra/skateboard_up/#options","title":"Options","text":"<pre><code>  -f, --force         Pass --force when syncing a new clone\n  -h, --help          help for up\n  -n, --new-clone     sync repositories w/ HEAD before running, use --force to override existing copies\n  -x, --no-sync       skip running 'service.sync' on all services\n  -p, --path string   Path to the contract file (default \"trucks.contract.fnl\")\n</code></pre>"},{"location":"cobra/skateboard_up/#see-also","title":"SEE ALSO","text":"<ul> <li>skateboard    - All your services, on trucks and wheels</li> </ul>"},{"location":"cobra/skateboard_up/#auto-generated-by-spf13cobra-on-4-aug-2023","title":"Auto generated by spf13/cobra on 4-Aug-2023","text":""},{"location":"sections/trucks/","title":"trucks","text":""},{"location":"sections/trucks/#writing-a-trucks-contract","title":"Writing a trucks contract","text":""},{"location":"sections/trucks/#loading-the-trucks-module","title":"Loading the trucks module","text":"<pre><code>(local trucks (require :trucks))\n</code></pre>"},{"location":"sections/trucks/#defining-a-contract","title":"Defining a contract","text":""},{"location":"sections/trucks/#setup-trucks","title":"Setup trucks","text":"<pre><code>;; setup an empty configuration table\n(do\n(trucks.mkconfig!)\n</code></pre> <p><code>do</code> block opens here...</p>"},{"location":"sections/trucks/#set-system-wide-configuration","title":"Set system wide configuration","text":"<pre><code>;; set system-wide configs\n(trucks.system! {:panic \"unwind\"\n:verbose \"true\"})\n</code></pre>"},{"location":"sections/trucks/#set-service-level-defaults","title":"Set service level defaults","text":"<pre><code>;; set defaults for all services\n(trucks.defaults! {:run-ctx \"npm\"\n:cmd \"run devstart\"\n:sync \"npm install\"})\n</code></pre>"},{"location":"sections/trucks/#define-services","title":"Define services","text":"<pre><code>;; add services\n(trucks.service! :fe {:github \"mattg1243/sb-frontend\"})\n(trucks.service! :courier {:github \"phasewalk1/courier\"\n:run-ctx \"cargo\"\n:cmd \"watch-x run\"\n:no-sync \"true\"})\n</code></pre>"},{"location":"sections/trucks/#export-the-contract","title":"Export the contract","text":"<pre><code>;; optionally - log the contract before exporting it\n;; (trucks.mallgrab! (trucks.contract!))\n;; export the contract\n(local contract (trucks.contract!))\ncontract)\n</code></pre> <p><code>do</code> block closes here...</p>"}]}